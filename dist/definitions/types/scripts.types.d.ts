import { EncryptedPacketsDto, PlayerPacketDto, PlayerPacketUpdateDto, ServerDto } from '../../generated/dtos.types';
import PlayerManager from '../../managers/entities/players/player/player.manager';
import { CameraModeType, CameraPosition, CameraTransition } from './camera.types';
import { CommandInfo } from './commands.types';
import { PlayerControls } from './controls.types';
import { CreateObjectProps, ObjectType } from './objects.types';
import { KeyInfo } from './ui.types';
import { QuaternionArray, Vector3Array } from './world.types';
export type ScriptStatus = 'connected' | 'disconnected' | 'connecting' | 'failed';
export type SizePropValue = `${number}vh` | `${number}vw` | `${number}px`;
export type SizeProps = {
    height: SizePropValue;
    width: SizePropValue;
    left?: SizePropValue;
    top?: SizePropValue;
    right?: SizePropValue;
    bottom?: SizePropValue;
};
export type CustomEventData = {
    [name: string]: any;
};
export type ScriptEventMap = {
    register: (eventName: string) => void;
    unregister: (eventName: string) => void;
    onConnect: () => void;
    onDisconnect: () => void;
    onSynced: () => void;
    setPlayerId: (playerId: number) => void;
    onFrame: (delta: number) => void;
    onChat: (text: string, playerId?: number) => void;
    sendMessage: (text: string, playerId?: number) => void;
    onCommand: (command: string, player?: PlayerManager) => void;
    onCommandNotFound: (command: string) => void;
    registerCommand: (playerId: number, commandInfo: CommandInfo, tag: string) => void;
    unregisterCommand: (playerId: number, command: string) => void;
    onEscapeKey: () => void;
    onKey: (keyInfo: KeyInfo) => void;
    addInterface: (tag: string) => void;
    removeInterface: (tag: string) => void;
    onCursorLock: (status: boolean) => void;
    onSetSize: (props: SizeProps) => void;
    onShow: () => void;
    onHide: () => void;
    OPU: (entityId: number, update: PlayerPacketDto | PlayerPacketUpdateDto) => void;
    onPlayerUpdate: (entityId: number, update: PlayerPacketDto | PlayerPacketUpdateDto) => void;
    onPlayerCreate: (playerId: number, data?: PlayerManager['data'], streamed?: boolean) => void;
    onPlayerDestroy: (playerId: number) => void;
    onPlayerStreamIn: (playerId: number, data?: PlayerManager['data']) => void;
    onPlayerStreamOut: (playerId: number) => void;
    setPlayerName: (playerId: number, name: string) => void;
    setPlayerDimension: (playerId: number, dimension: number) => void;
    addPlayerRole: (playerId: number, role: string) => void;
    removePlayerRole: (playerId: number, role: string) => void;
    onControlChange: (control: keyof PlayerControls, newState: boolean, oldState: boolean) => void;
    setPlayerPosition: (playerId: number, position: Vector3Array, instant?: boolean) => void;
    setPlayerRotation: (playerId: number, rotation: QuaternionArray | Vector3Array, instant: boolean) => void;
    setPlayerFacingAngle: (playerId: number, degrees: number, instant: boolean) => void;
    setPlayerCameraBehind: (playerId: number) => void;
    setPlayerMovements: (playerId: number, status: boolean) => void;
    setPlayerTranslations: (playerId: number, x: boolean, y: boolean, z: boolean) => void;
    setPlayerLinearVelocity: (playerId: number, vel: Vector3Array) => void;
    setPlayerVisible: (playerId: number, visible: boolean) => void;
    sendPlayerNotification: (playerId: number, message: string, type: 'success' | 'error', duration: number) => void;
    OCU: (position: Vector3Array, quaternion: QuaternionArray) => void;
    onCameraModeChange: (playerId: number, mode: CameraModeType, instant?: boolean) => void;
    setCameraTransitions: (playerId: number, transitions: CameraTransition[]) => void;
    setCameraTransition: (playerId: number, transition: CameraTransition) => void;
    setCameraPosition: (playerId: number, position: CameraPosition) => void;
    onCameraTransitionStart: (id?: number | string) => void;
    onCameraTransitionEnd: (id?: number | string) => void;
    createObject: (type: ObjectType, props: CreateObjectProps) => void;
    setObjectPosition: (objectId: string, position: Vector3Array) => void;
    setObjectRotation: (objectId: string, rotation: QuaternionArray | Vector3Array) => void;
    destroyObject: (objectId: string) => void;
    syncServer: (server: ServerDto, endpoint: string) => void;
    syncEncryptedPackets: (packets: EncryptedPacketsDto) => void;
    emitToServer: (event: string, data?: CustomEventData) => void;
    emitToPlayers: (event: string, data?: CustomEventData) => void;
    emitToPlayer: (playerId: number, event: string, data?: CustomEventData) => void;
    restartServer: (reason?: string) => void;
    setForwardMessages: (status: boolean) => void;
} & {
    [key in `onServerCustomEvent_${string}`]: (data?: CustomEventData) => void;
} & {
    [key in `onPlayerCustomEvent_${string}`]: (playerId: number, data?: CustomEventData) => void;
};
