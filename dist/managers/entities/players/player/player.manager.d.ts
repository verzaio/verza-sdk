import { Euler, Quaternion, Vector3 } from 'three';
import { PlayerControls } from '../../../../definitions/types/controls.types';
import { PlayerEntity } from '../../../../definitions/types/entities.types';
import { PlayerEventMap } from '../../../../definitions/types/events.types';
import { QuaternionArray, Vector3Array } from '../../../../definitions/types/world.types';
import EngineManager from '../../../../managers/engine.manager';
import EntityManager from '../../entity/entity.manager';
import PlayerCameraManager from './player-camera.manager';
import type PlayerHandleManager from './player-handle.manager';
import PlayerMessengerManager from './player-messenger.manager';
import PlayerVoicechatManager from './player-voicechat.manager';
declare class PlayerManager extends EntityManager<PlayerEntity, PlayerHandleManager, PlayerEventMap> {
    private _local_messenger;
    get messenger(): PlayerMessengerManager;
    voicechat: PlayerVoicechatManager;
    camera: PlayerCameraManager;
    controls: PlayerControls;
    get isMovingControl(): boolean;
    get name(): string;
    get roles(): string[];
    private set roles(value);
    get onGround(): boolean;
    get state(): "dead" | "running" | "falling" | "idle" | "walking" | "jumping";
    get isControlling(): boolean;
    get velocity(): Vector3;
    private get _serverCommands();
    constructor(entity: PlayerEntity, engine: EngineManager);
    hasAccess(command: string): boolean;
    updateName(name: string): void;
    updateRoles(roles: string[]): void;
    setName(name: string): void;
    addRole(roleId: string): void;
    removeRole(roleId: string): void;
    setDimension(dimension: number): void;
    setPosition(position: Vector3 | Vector3Array, instant?: boolean): void;
    setRotation(rotation: Quaternion | Euler | QuaternionArray | Vector3Array, instant?: boolean): void;
    getFacingAngle(): number;
    setFacingAngle(degrees: number, instant?: boolean): void;
    setCameraBehind(): void;
    sendMessage(message: string): void;
    setMovements(status: boolean): void;
    setTranslations(x: boolean, y: boolean, z: boolean): void;
    setLinearVelocity(vec: Vector3 | Vector3Array): void;
    setVisible(visible: boolean): void;
    sendSuccessNotification(message: string, duration?: number): void;
    sendErrorNotification(message: string, duration?: number): void;
}
export default PlayerManager;
