import { ScriptEventMap } from '../../definitions/types/scripts.types';
import { ServerDto } from '../../generated/dtos.types';
import EngineManager from '../engine.manager';
import WebServerManager from './servers/web-server.manager';
import WebsocketServerManager from './servers/websocket-server.manager';
declare class ApiManager {
    private _engine;
    server: ServerDto;
    endpoint: string;
    websocketServer: WebsocketServerManager;
    webServer: WebServerManager;
    accessToken: string;
    private _accessTokenBase64;
    get webServerEndpoint(): string;
    get isWebServerAvailable(): boolean;
    get isWebServer(): false;
    get isWebsocketServer(): boolean;
    get isServer(): boolean;
    get isClient(): boolean;
    get isApi(): boolean;
    get network(): import("../network.manager").default;
    get encryptedPackets(): import("../../generated/dtos.types").EncryptedPacketsDto;
    constructor(engine: EngineManager);
    bind(): void;
    private _setEndpoint;
    private _setAccessToken;
    encryptPacket(data: unknown): string;
    decryptPacket(data: string): any;
    handle(rawData: unknown): Promise<unknown>;
    emitAction<A extends keyof ScriptEventMap>(eventName: A, args?: Parameters<ScriptEventMap[A]>): Promise<void>;
    emitActionToServer<A extends keyof ScriptEventMap>(eventName: A, args?: Parameters<ScriptEventMap[A]>): Promise<void>;
    emitLocalAction<A extends keyof ScriptEventMap>(eventName: A, args?: Parameters<ScriptEventMap[A]>): Promise<void>;
    connectWs(): void;
    destroy(): void;
}
export default ApiManager;
